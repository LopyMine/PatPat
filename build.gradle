import net.lopymine.mossy.MossyPlugin

plugins {
	id("net.lopymine.mossy-plugin")
}

mossyDependencies {
	def mcVersion = stonecutter.current.version.toString()
	minecraft = mcVersion
	mappings = prop("build.yarn")
	lombok = prop("base.lombok_version")
	fabricApi = prop("build.fabric_api")
	fabricLoader = prop("build.fabric_loader")

	additional {
		// - By default, every additional project dependency ("dep.modId" from gradle.properties) will use
		// - Modrinth Maven and "modImplementation" configuration name
		// - If you want to override mod configuration name, you can do this:
		// override("modCompileOnly", "just_mod_id")
		// - It will do this:
		// - modImplementation("maven.modrinth:modId:version") -> modCompileOnly("maven.modrinth:modId:version")
		// - Or if you want to disable it and handle by yourself, just disable it auto handling:
		// disable("just_mod_id")

		override("modCompileOnly", "flashback")
		override("modCompileOnly", "replaymod")

		// Fabric Permissions Api
		disable("fabric-permissions-api")
		// Cloth-Config
		disable("cloth-config")
		// GeckoLib
		disable("geckolib")
		// ProxLib
		disable("proxlib")
		// Replay Mod
	}
}

mossyResources {
	//expandFiles = ["custom", "file", "patterns", "here"]
}

repositories {
	maven {
		name = "Cloth Config"
		url = "https://maven.shedaniel.me/"
	} // Cloth Config

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	} // Replay Mod

	maven {
		name = 'GeckoLib'
		url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
			includeGroup("com.eliotlash.molang")
		}
	}
}

dependencies {
	def mcVersion = stonecutter.current.version.toString()

	mappings loom.officialMojangMappings()

	// Fabric permission api
	def fpaVersion = prop("build.fabric-permissions-api")
	include(modImplementation('me.lucko:fabric-permissions-api:' + fpaVersion)){
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Cloth Config
	def clothConfigVersion = prop("dep.cloth-config")
	modApi("me.shedaniel.cloth:cloth-config-fabric:${stonecutter.compare("1.19", mcVersion) == 1 ? clothConfigVersion : MossyPlugin.substringBefore(clothConfigVersion, "+")}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// GeckoLib
	def geckoLibVersion = prop("dep.geckolib")
	if (geckoLibVersion != "unknown") {
		if (mcVersion == "1.16.5") {
			modCompileOnly("software.bernie.geckolib:geckolib-forge-${mcVersion}:${geckoLibVersion}")
		} else if (mcVersion == "1.17.1") {
			modCompileOnly("software.bernie.geckolib:geckolib-1.17.1-forge:${geckoLibVersion}")
		} else if (mcVersion == "1.18.2") {
			modCompileOnly("software.bernie.geckolib:geckolib-forge-1.18:${geckoLibVersion}")
		} else if (mcVersion == "1.19.1" || mcVersion == "1.19.2") {
			modCompileOnly("software.bernie.geckolib:geckolib-fabric-1.19:${geckoLibVersion}")
		} else if (mcVersion == "1.20") {
			modCompileOnly("software.bernie.geckolib:geckolib-fabric-1.20.1:${geckoLibVersion}")
		} else {
			modCompileOnly("software.bernie.geckolib:geckolib-fabric-${mcVersion}:${geckoLibVersion}")
		}
	}
	// TODO: Добавить тесты на версию раньше, чем 1.18.2
	if (stonecutter.compare(mcVersion, "1.18.2") >= 0) {
		testImplementation("net.fabricmc:fabric-loader-junit:${prop("build.fabric_loader")}")
	}

	def proxlibVersion = prop("dep.proxlib")
	if (proxlibVersion != "unknown") {
		include(modApi("maven.modrinth:proxlib:${proxlibVersion}"))
	}
}

if (stonecutter.compare(stonecutter.current.version.toString(), "1.18.2") >= 0) {
	test {
		useJUnitPlatform()
	}
}

configurations.configureEach {
	resolutionStrategy {
		force("net.fabricmc:fabric-loader:${prop("build.fabric_loader")}")
	}
}

stonecutter {
	var buildTime = (int) (System.currentTimeMillis() / 10000) - 174611089
	var buildCodeTime = String.format("%07x", buildTime & 0xFFFFFFF)
	swap("build_code_time", "\"${buildCodeTime}\";")
}

//tasks.register('submodulesUpdate', Exec) {
//	description 'Updates (and inits) git submodules'
//	commandLine 'git', 'submodule', 'update', '--init', '--force', '--remote'
//}
//processResources.dependsOn("submodulesUpdate")

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

//	from("../../patpat-languages-files/lang") {
//		into "assets/${prop("data.mod_id")}/lang/"
//		eachFile { file ->
//			if (!file.isDirectory()) {
//				// Client requires lang files in lower case
//				file.name = file.name.toLowerCase()
//			}
//		}
//	}
}

String prop(String key) {
	return findProperty(key).toString()
}
