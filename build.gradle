plugins {
	id("fabric-loom") version "1.7-SNAPSHOT"
	id("dev.kikugie.j52j") version "1.0.2"
	id("me.modmuss50.mod-publish-plugin") version "0.7.4"
}

def modId = prop("mod_id")
def modName = prop("mod_name")
def modVersion = prop("mod_version")
def modGroup = prop("mod_group")
def modMavenGroup = prop("mod_maven_group")
def modDescription = prop("mod_description")
def modAuthors = prop("mod_authors")
def modLicense = prop("mod_license")
def lombokVersion = prop("lombok_version")

def mcVersion = stonecutter.current.version.toString() // Current MC version from "./versions/" folder
def currentMultiVersion = getCurrentMultiVersion(mcVersion)
println "[${mcVersion}] Supported Minecraft Versions: ${currentMultiVersion.toVersionRange()}"

def javaVersionAsInt = getJavaVersionAsInteger(mcVersion)
def javaVersion = JavaVersion.toVersion(javaVersionAsInt)
println "[${mcVersion}] Using Java: ${javaVersion.toString()}"

version = "${modVersion}+${currentMultiVersion.projectVersion}"
group = modMavenGroup

j52j {
	sources(sourceSets["main"])
}

base {
	archivesName = modName
}

repositories {
	maven { url "https://maven.quiltmc.org/repository/release/" } // Stil for YACL
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" } // Stil for YACL
	maven {
		name "Terraformers" // ModMenu
		url "https://maven.terraformersmc.com/"
	}
	maven {
		name 'Xander Maven' // YACL
		url 'https://maven.isxander.dev/releases'
	}
	maven {
		url "https://maven.nucleoid.xyz/"
		name "Nucleoid"
	}
	// For Mod Menu, because at 1.20.4 it needs PlaceHolder API, see https://github.com/TerraformersMC/ModMenu/issues/752
	maven {
		name "Cloth Config"
		url "https://maven.shedaniel.me/"
	} // Cloth Config

	maven {
		name "Modrinth"
		url "https://api.modrinth.com/maven"
	} // Needs for Replay Mod

	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${mcVersion}"
	mappings "net.fabricmc:yarn:${prop("build.yarn")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${prop("build.fabric_loader")}"

	// Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${prop("build.fabric_api")}"

	// Mod Menu
	modImplementation "com.terraformersmc:modmenu:${prop("dep.modmenu")}"

	// YACL
	if (stonecutter.compare("1.20.1", mcVersion) != 1) {
		def minecraftVersionsWithOldYACLMaven = Set.of("1.19.4", "1.20", "1.20.2", "1.20.3")
		def yaclVersion = prop("dep.yacl")
		if (minecraftVersionsWithOldYACLMaven.contains(mcVersion)) {
			modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:${substringBefore(yaclVersion.toString(), "-")}"
		} else {
			modImplementation "dev.isxander:yet-another-config-lib:${yaclVersion}"
		}
	}

	// Cloth Config
	def clothConfigVersion = findProperty("dep.cloth-config")
	modApi("me.shedaniel.cloth:cloth-config-fabric:${stonecutter.compare("1.19", mcVersion) == 1 ? clothConfigVersion : substringBefore(clothConfigVersion, "+")}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation("software.bernie.geckolib:geckolib-fabric-${mcVersion}:${prop("dep.geckolib")}")

	if (!(stonecutter.compare("1.20.5", mcVersion) == 0)) {
		// Replay Mod
		modImplementation("maven.modrinth:replaymod:${findProperty("dep.replaymod")}")
	}
}

loom {
	mixin {
		defaultRefmapName.set("${modId}.refmap.json")
	}

	def accessWidenerFile = project.rootProject.file("src/main/resources/aws/${mcVersion}.accesswidener")
	if (accessWidenerFile.exists()) {
		accessWidenerPath = accessWidenerFile
	}

	def personalProperties = getPersonalProperties()
	def pathToSpongeMixin = personalProperties.get("absolute_path_to_sponge_mixin")
	def quickPlay = getNickname(personalProperties.get("quick_play"))
	def playerNickname = getNickname(personalProperties.get("player_nickname"))
	def playerUuid = getUUID(personalProperties.get("player_uuid"))

	runConfigs.configureEach { config ->
		config.setIdeConfigGenerated(true) // generate IDE tasks for running client, server and testmod, datagen if those are present
		config.setRunDir("../../runs/${config.environment}") // use different run directory for all environments

		if (config.getEnvironment() == "client") {
			// setting player properties from "./players/personal.properties" file
			if (playerNickname != null && pathToSpongeMixin.toString() != "none") {
				config.programArgs("--username", playerNickname.toString())
			}
			if (playerUuid != null && pathToSpongeMixin.toString() != "none") {
				config.programArgs("--uuid", playerUuid.toString())
			}
			if (playerUuid != null && pathToSpongeMixin.toString() != "none") {
				config.programArgs("--uuid", playerUuid.toString())
			}
			if (quickPlay != null && quickPlay.toString() != "none") {
				config.programArgs("--quickPlaySingleplayer", quickPlay.toString())
			}
			if (pathToSpongeMixin != null && pathToSpongeMixin.toString() != "none") {
				config.vmArg("-javaagent:${pathToSpongeMixin.toString()}")
			}
		}
	}
}

processResources {
	def props = [:]
	props.put("mod_id", modId.toString())
	props.put("mod_authors", modAuthors.toString())
	props.put("mod_group", modGroup)
	props.put("mod_description", modDescription.toString())
	props.put("mod_name", modName.toString())
	props.put("mod_license", modLicense.toString())
	props.put("version", version.toString())
	props.put("fabric_loader", prop("build.fabric_loader").toString())
	props.put("minecraft", mcVersion.toString())
	props.put("java", javaVersionAsInt.toString())
//	props.put("fabric_api", substringBefore(prop("build.fabric_api").toString(), "+"))
	props.put("fabric_api_id", stonecutter.compare("1.19.1", mcVersion) >= 0 ? "fabric" : "fabric-api")

	props.each { key, value ->
		inputs.property key, value
	}


	filesMatching(["fabric.mod.json", "${modId}.mixins.json5".toString(), "assets/${modId}/lang/*.json".toString()]) {
		expand(props)
	}

	filesMatching("aws/*.accesswidener") {
		if (!it.getName().startsWith(mcVersion)) {
			it.exclude()
		}
	}
}

stonecutter {
	swap("mod_version", "\"${prop("mod_version")}\";")
	swap("mod_id", "\"${prop("mod_id")}\";")
	swap("mod_name", "\"${prop("mod_name")}\";")
}

configurations.all {
	resolutionStrategy {
		force("net.fabricmc:fabric-loader:${findProperty("build.fabric_loader").toString()}")
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = (javaVersionAsInt as int)
}

tasks.register('createPersonalProperties') {
	group = 'project'

	doFirst {
		def folder = project.rootProject.file("personal/")
		if (folder.exists() || folder.mkdirs()) {
			def props = project.rootProject.file("personal/personal.properties")
			props.createNewFile()
			props.text =
					"""
					# # # # # # # # # # # # # #
					#   Personal Properties   #
					# # # # # # # # # # # # # #
					
					# If you don't want to set up any property, just set it to "none".
					# Remember to run "regenerateRunConfigurations" task after changing this file!
					
					# Player properties
					player_nickname=Steve
					player_uuid=8667ba71-b85a-4004-af54-457a9734eed7
					
					# Hot Swapping
					absolute_path_to_sponge_mixin=none
					
					# Quick Play
					world_name=none
					""".stripIndent().strip()
		}
	}
}

tasks.register('regenerateRunConfigurations', Delete) {
	group = 'project'
	delete(project.rootProject.file(".idea/runConfigurations"))
	finalizedBy("ideaSyncTask")
}

tasks.register('buildAndCollect', Copy) {
	group = 'build'
	from(tasks.remapJar.archiveFile)
	into(project.rootProject.file("libs/"))
	dependsOn('rebuildLibs')
}

tasks.register('rebuildLibs', Delete) {
	group = 'build'
	delete(project.rootProject.file("libs/${modName}-${version}.jar"))
	delete(project.file("libs/${modName}-${version}.jar"))
	delete(project.file("libs/${modName}-${version}-sources.jar"))
	finalizedBy("build")
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

publishMods {
	def loaders = prop("loaders").toString().split(" ")
	def modrinthProjectId = prop("modrinth_id").toString()
	def embedsDepends = prop("embeds_depends").toString().split(" ")
	def curseForgeProjectId = prop("curseforge_id").toString()
	def requiresDepends = prop("requires_depends").toString().split(" ")
	def optionalDepends = prop("optional_depends").toString().split(" ")
	def incompatibleDepends = prop("incompatible_depends").toString().split(" ")
	def versionTypeProperty = prop("version_type").toString()
	def maxJavaVersion = JavaVersion.toVersion(prop("max_java_version"))
	def isClient = Boolean.parseBoolean(prop("is_for_client)").toString())
	def isTesting = Boolean.parseBoolean(prop("test_publish)").toString())
	def isServer = Boolean.parseBoolean(prop("is_for_server)").toString())
	def versionName = "[${currentMultiVersion.toVersionRange()}] ${prop("mod_name")} v${prop("mod_version")}"
	def curseForgeApiKeyIsPresent = providers.environmentVariable("CURSEFORGE_API_KEY").getOrNull() == null
	def modrinthApiKeyIsPresent = providers.environmentVariable("MODRINTH_API_KEY").getOrNull() == null
	def bl3 = isTesting || curseForgeApiKeyIsPresent || modrinthApiKeyIsPresent

	println "[PublishMods] Configuring '${versionName}' for publishing"
	displayName = versionName
	file = getVerifiedOrDefaultJar(prop("mod_name"), prop("mod_version"), mcVersion)
	changelog = getChangeLog()
	if (versionTypeProperty == "RELEASE") {
		type = STABLE
	} else if (versionTypeProperty == "BETA") {
		type = BETA
	} else if (versionTypeProperty == "ALPHA") {
		type = ALPHA
	}
	modLoaders.addAll(loaders)
	dryRun = bl3

	if (bl3) {
		println "[PublishMods] Test Mode Enabled!"
	}

	curseforge {
		projectId = curseForgeProjectId
		accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")

		for (i in javaVersion.ordinal()..<maxJavaVersion.ordinal() + 1) {
			javaVersions.add(JavaVersion.values()[i])
		}

		clientRequired = isClient
		serverRequired = isServer

		if (currentMultiVersion.minVersion != currentMultiVersion.maxVersion) {
			minecraftVersionRange {
				start = currentMultiVersion.minVersion
				end = currentMultiVersion.maxVersion
			}
		} else {
			minecraftVersions.add(currentMultiVersion.maxVersion)
		}

		if (requiresDepends.first() != "none") {
			requires(requiresDepends)
		}
		if (optionalDepends.first() != "none") {
			optional(optionalDepends)
		}
		if (incompatibleDepends.first() != "none") {
			incompatible(incompatibleDepends)
		}
		if (embedsDepends.first() != "none") {
			embeds(embedsDepends)
		}
	}

	modrinth {
		projectId = modrinthProjectId
		accessToken = providers.environmentVariable("MODRINTH_API_KEY")

		if (currentMultiVersion.minVersion != currentMultiVersion.maxVersion) {
			minecraftVersionRange {
				start = currentMultiVersion.minVersion
				end = currentMultiVersion.maxVersion
			}
		} else {
			minecraftVersions.add(currentMultiVersion.maxVersion)
		}

		if (requiresDepends.first() != "none") {
			requires(requiresDepends)
		}
		if (optionalDepends.first() != "none") {
			optional(optionalDepends)
		}
		if (incompatibleDepends.first() != "none") {
			incompatible(incompatibleDepends)
		}
		if (embedsDepends.first() != "none") {
			embeds(embedsDepends)
		}
	}
}

static String substringBefore(Object o, String ch) {
	if (o == null) {
		return "null"
	}
	def string = o.toString()
	def i = string.indexOf(ch)
	if (i == -1) {
		return string
	} else {
		return string.substring(0, i)
	}
}

String getNickname(Object nickname) {
	if (nickname == null || nickname == "null" || nickname == "none") {
		return null
	}
	if (!nickname.toString().matches('^[a-zA-Z0-9_]{2,16}$')) {
		println "WARNING — Your nickname is wrong, using default nickname 'Player'"
		return "Player"
	}
	return nickname.toString()
}

UUID getUUID(Object uuid) {
	if (uuid == null || uuid.toString() == "null" || uuid.toString() == "none") {
		return null
	}
	try {
		if (uuid.toString().indexOf("-") == -1) {
			return UUID.fromString(uuid.toString().replaceFirst("(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})", '$1-$2-$3-$4-$5'))
		}
		return UUID.fromString(uuid.toString())
	} catch (Exception e) {
		e.printStackTrace()
	}
	println "WARNING — Your UUID is wrong, failed to parse it"
	return null
}

// Cannot be static!
int getJavaVersionAsInteger(String minecraftVersion) {
	return stonecutter.compare("1.20.5", minecraftVersion) == 1 ?
			stonecutter.compare("1.18", minecraftVersion) == 1 ?
					stonecutter.compare("1.16.5", minecraftVersion) == 1 ?
							8
							:
							16
					:
					17
			:
			21
}

Properties getPersonalProperties() {
	def personalProperties = new Properties()
	def personalPropertiesFile = project.rootProject.file("personal/personal.properties")
	if (personalPropertiesFile.exists()) {
		personalPropertiesFile.withInputStream { stream ->
			personalProperties.load(stream)
		}

		for (line in personalPropertiesFile.readLines()) {
			def key = "absolute_path_to_sponge_mixin"
			if (line.startsWith(key)) {
				def substring = line.substring(key.length() + 1)
				if (!substring.isEmpty()) {
					personalProperties.setProperty(key, substring)
				}
			}
		}

	}
	return personalProperties
}

MultiVersion getCurrentMultiVersion(String minecraftVersion) {
	def versions = prop("publication_versions").toString().split(" ")
	for (version in versions) {
		def split = version.substring(0, version.length() - 1).split("\\[")
		def project = split[0]
		if (project == minecraftVersion) {
			def supportedVersionsString = split[1]
			if (supportedVersionsString.contains("-")) {
				def supportedVersions = supportedVersionsString.split("-")
				return new MultiVersion(projectVersion: minecraftVersion, minVersion: supportedVersions[0], maxVersion: supportedVersions[1])
			}
			return new MultiVersion(projectVersion: minecraftVersion, minVersion: minecraftVersion, maxVersion: supportedVersionsString)
		}

	}
	return new MultiVersion(projectVersion: minecraftVersion, minVersion: minecraftVersion, maxVersion: minecraftVersion)
}

class MultiVersion {
	String projectVersion
	String minVersion
	String maxVersion

	String toString() {
		if (minVersion != maxVersion) {
			return "${projectVersion}[${minVersion}-${maxVersion}]"
		}
		return "${projectVersion}[${maxVersion}]"
	}

	String toVersionRange() {
		if (minVersion != maxVersion) {
			return "${minVersion}-${maxVersion}"
		}
		return maxVersion
	}
}

def getVerifiedOrDefaultJar(String modName, String modVersion, String minecraftVersion) {
	def path = "libs/${modName}-${modVersion}+${minecraftVersion}.jar"
	def provider = project.rootProject.layout.buildDirectory.file(path)
	def regularFile = provider.orNull
	if (regularFile == null || !regularFile.getAsFile().exists()) {
		println "[PublishMods] Failed to find jar file at '${path}'! Using archive file!"
		return jar.archiveFile
	}
	return regularFile.getAsFile()
}

String getChangeLog() {
	def file = project.rootProject.file("publish/CHANGELOG.md")
	if (file.exists()) {
		def text = file.getText()
		if (!text.isBlank()) {
			return text
		}
	}
	return "No changelog specified."
}

String prop(String key) {
	return findProperty(key).toString()
}