package net.lopymine.patpat.modmenu;

import java.util.*;
import lombok.*;
import net.lopymine.patpat.client.config.PatPatClientConfig;
import net.lopymine.patpat.client.config.list.PatPatClientProxLibServersWhitelistConfig;
import net.lopymine.patpat.client.config.sub.PatPatClientFunConfig;
import net.lopymine.patpat.modmenu.common.*;
import net.lopymine.patpat.modmenu.common.image.*;
import net.lopymine.patpat.modmenu.common.option.*;
import net.lopymine.patpat.utils.*;
import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;

@Getter
@Builder
public class PatConfig {

	@Singular("addCategory")
	private List<PatCategory> categories;
	private final Component title;
	private final Runnable onSave;

	public static PatConfig generate() {
		PatPatClientConfig config = PatPatClientConfig.getInstance();
		PatPatClientConfig defConfig = PatPatClientConfig.getNewInstance().get();

		return PatConfig.builder()
				.title(ModMenuUtils.getModTitle())
				.onSave(config::saveAsync)
				.addCategory(PatCategory.builder()
						.key("main")
						.addElement(PatGroup.builder()
								.key("main")
								.addOption(BooleanOption.builder()
										.key("enable_mod")
										.defaultValue(defConfig.getMainConfig().isModEnabled())
										.getter(() -> config.getMainConfig().isModEnabled())
										.setter(config.getMainConfig()::setModEnabled)
										.build()
								)
								.addOption(BooleanOption.builder()
										.key("debug_log_enabled")
										.defaultValue(defConfig.getMainConfig().isDebugLogEnabled())
										.getter(() -> config.getMainConfig().isDebugLogEnabled())
										.setter(config.getMainConfig()::setDebugLogEnabled)
										.build()
								)
								.build()
						)
						.addElement(PatGroup.builder()
								.key("custom_animations")
								.addOption(BooleanOption.builder()
										.key("skip_outdated_animations_enabled")
										.defaultValue(defConfig.getResourcePacksConfig().isSkipOldAnimationsEnabled())
										.getter(() -> config.getResourcePacksConfig().isSkipOldAnimationsEnabled())
										.setter(config.getResourcePacksConfig()::setSkipOldAnimationsEnabled)
										.build()
								)
								.build()
						)
						.addElement(PatGroup.builder()
								.key("sound")
								.addOption(BooleanOption.builder()
										.key("enable_sounds")
										.defaultValue(defConfig.getSoundsConfig().isSoundsEnabled())
										.getter(() -> config.getSoundsConfig().isSoundsEnabled())
										.setter(config.getSoundsConfig()::setSoundsEnabled)
										.build()
								)
								.addOption(SliderNumberOption.<Float>builder()
										.key("enable_sounds")
										.defaultValue(defConfig.getSoundsConfig().getSoundsVolume())
										.getter(() -> config.getSoundsConfig().getSoundsVolume())
										.setter(config.getSoundsConfig()::setSoundsVolume)
										.min(0F).max(2F).step(0.01F)
										.build()
								)
								.build()
						)
						.addElement(PatGroup.builder()
								.key("visual")
								.addOption(BooleanOption.builder()
										.key("hiding_nickname_enabled")
										.defaultValue(defConfig.getVisualConfig().isHidingNicknameEnabled())
										.getter(() -> config.getVisualConfig().isHidingNicknameEnabled())
										.setter(config.getVisualConfig()::setHidingNicknameEnabled)
										.build()
								)
								.addOption(BooleanOption.builder()
										.key("client_swing_hand_enabled")
										.defaultValue(defConfig.getVisualConfig().isClientSwingHandEnabled())
										.getter(() -> config.getVisualConfig().isClientSwingHandEnabled())
										.setter(config.getVisualConfig()::setClientSwingHandEnabled)
										.build()
								)
								.addOption(BooleanOption.builder()
										.key("server_swing_hand_enabled")
										.defaultValue(defConfig.getVisualConfig().isServerSwingHandEnabled())
										.getter(() -> config.getVisualConfig().isServerSwingHandEnabled())
										.setter(config.getVisualConfig()::setServerSwingHandEnabled)
										.build()
								)
								.addOption(SliderNumberOption.<Float>builder()
										.key("animation_offset_x")
										.defaultValue(defConfig.getVisualConfig().getAnimationOffsets().getX())
										.getter(() -> config.getVisualConfig().getAnimationOffsets().getX())
										.setter(config.getVisualConfig().getAnimationOffsets()::setX)
										.min(-5F).max(5F).step(0.01F)
										.addImage(PatImage.builder()
												.resource(ModMenuUtils.getContentId("animation_offset_x.png"))
												.type(ImageType.IMAGE)
												.width(500)
												.height(500)
												.build()
										)
										.build()
								)
								.addOption(SliderNumberOption.<Float>builder()
										.key("animation_offset_y")
										.defaultValue(defConfig.getVisualConfig().getAnimationOffsets().getY())
										.getter(() -> config.getVisualConfig().getAnimationOffsets().getY())
										.setter(config.getVisualConfig().getAnimationOffsets()::setY)
										.min(-5F).max(5F).step(0.01F)
										.addImage(PatImage.builder()
												.resource(ModMenuUtils.getContentId("animation_offset_y.png"))
												.type(ImageType.IMAGE)
												.width(500)
												.height(500)
												.build()
										)
										.build()
								)
								.addOption(SliderNumberOption.<Float>builder()
										.key("animation_offset_z")
										.defaultValue(defConfig.getVisualConfig().getAnimationOffsets().getZ())
										.getter(() -> config.getVisualConfig().getAnimationOffsets().getZ())
										.setter(config.getVisualConfig().getAnimationOffsets()::setZ)
										.min(-5F).max(5F).step(0.01F)
										.addImage(PatImage.builder()
												.resource(ModMenuUtils.getContentId("animation_offset_z.png"))
												.type(ImageType.IMAGE)
												.width(500)
												.height(500)
												.build()
										)
										.build()
								)
								.addOption(BooleanOption.builder()
										.key("camera_shacking")
										.defaultValue(defConfig.getVisualConfig().isCameraShackingEnabled())
										.getter(() -> config.getVisualConfig().isCameraShackingEnabled())
										.setter(config.getVisualConfig()::setCameraShackingEnabled)
										.build()
								)
								.addOption(NumberOption.<Float>builder()
										.key("pat_weight")
										.defaultValue(defConfig.getVisualConfig().getPatWeight())
										.getter(() -> config.getVisualConfig().getPatWeight())
										.setter(config.getVisualConfig()::setPatWeight)
										.min(0F).max(5F)
										.build()
								)
								.build()
						)
						.addElement(PatGroup.builder()
								.key("multiplayer")
								.addOption(BooleanOption.builder()
										.key("pat_me_enabled")
										.defaultValue(defConfig.getMultiPlayerConfig().isPatMeEnabled())
										.getter(() -> config.getMultiPlayerConfig().isPatMeEnabled())
										.setter(config.getMultiPlayerConfig()::setPatMeEnabled)
										.build()
								)
								.addOption(BooleanOption.builder()
										.key("bypass_server_animations_priority_enabled")
										.defaultValue(defConfig.getMultiPlayerConfig().isBypassServerResourcePackPriorityEnabled())
										.getter(() -> config.getMultiPlayerConfig().isBypassServerResourcePackPriorityEnabled())
										.setter(config.getMultiPlayerConfig()::setBypassServerResourcePackEnabled)
										.build()
								)
								.build()
						)
						.addElement(PatGroup.builder()
								.key("fun")
								.addOption(EnumOption.<PatPatClientFunConfig.PvpMode>builder()
										.key("pvp_mode")
										.enumClass(PatPatClientFunConfig.PvpMode.class)
										.enumNameProvider(PatPatClientFunConfig.PvpMode::getText)
										.defaultValue(defConfig.getFunConfig().getPvpMode())
										.getter(() -> config.getFunConfig().getPvpMode())
										.setter(config.getFunConfig()::setPvpMode)
										.build()
								)
								.build()
						)
						//? if proxlib {
						/*.addElement(PatGroup.builder()
								.key("proximity_packets")
								.addOption(BooleanOption.builder()
										.name(ModMenuUtils.getOptionName("proximity_packets_enabled"))
										.description(getDescriptionWithWarn("proximity_packets_enabled"))
										.defaultValue(defConfig.getProximityPacketsConfig().isProximityPacketsEnabled())
										.getter(() -> config.getProximityPacketsConfig().isProximityPacketsEnabled())
										.setter(config.getProximityPacketsConfig()::setProximityPacketsEnabled)
										.build()
								)
								.addOption(SliderNumberOption.<Integer>builder()
										.key("max_packets_per_second")
										.defaultValue(defConfig.getProximityPacketsConfig().getMaxPacketsPerSecond())
										.getter(() -> config.getProximityPacketsConfig().getMaxPacketsPerSecond())
										.setter(config.getProximityPacketsConfig()::setMaxPacketsPerSecond)
										.min(1).max(50).step(1)
										.build()
								)
								.addOption(BooleanOption.builder()
										.key("proximity_packets_list_is_blacklist")
										.defaultValue(defConfig.getProximityPacketsConfig().isBlacklist())
										.getter(() -> config.getProximityPacketsConfig().isBlacklist())
										.setter(config.getProximityPacketsConfig()::setBlacklist)
										.build()
								)
								.addOption(PatListOption.<String>builder()
										.name(ModMenuUtils.getOptionName("proximity_packets_servers_whitelist"))
										.description(getDescriptionWithWarn("proximity_packets_servers_whitelist"))
										.defaultValue(PatPatClientProxLibServersWhitelistConfig.DEFAULT_VALUES)
										.getter(() -> new ArrayList<>(PatPatClientProxLibServersWhitelistConfig.getInstance().getValues()))
										.setter(PatPatClientProxLibServersWhitelistConfig::rewriteServersList)
										.initial("")
										.maxEntries(2000)
										.build()
								)
								.build()
						)
						*///?}
						.build()
				)
				.build();
	}

	public static PatDescription getDescriptionWithWarn(String key) {
		return PatDescription.of(
				TextUtils.empty()
						.append(ModMenuUtils.getCustom(ModMenuUtils.getOptionKey(key), "warn").withStyle(ChatFormatting.RED))
						.append("\n\n")
						.append(ModMenuUtils.getOptionDescription(key))
		);
	}
}
