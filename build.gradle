import net.lopymine.mossy.MossyPlugin

plugins {
	id("net.lopymine.mossy-plugin")
}

mossyDependencies {
	def mcVersion = stonecutter.current.version.toString()
	minecraft = mcVersion
	mappings = prop("build.yarn")
	lombok = prop("base.lombok_version")
	fabricApi = prop("build.fabric_api")
	fabricLoader = prop("build.fabric_loader")

	additional {
		// - By default, every additional project dependency ("dep.modId" from gradle.properties) will use
		// - Modrinth Maven and "modImplementation" configuration name
		// - If you want to override mod configuration name, you can do this:
		// override("modCompileOnly", "just_mod_id")
		// - It will do this:
		// - modImplementation("maven.modrinth:modId:version") -> modCompileOnly("maven.modrinth:modId:version")
		// - Or if you want to disable it and handle by yourself, just disable it auto handling:
		// disable("just_mod_id")

		// Fabric Permissions Api
		disable("fabric-permissions-api")
		// Cloth-Config
		disable("cloth-config")
		// GeckoLib
		disable("geckolib")
		// Replay Mod
		if (stonecutter.compare("1.20.5", mcVersion) == 0) {
			disable("replaymod")
		} else {
			override("modCompileOnly", "replaymod")
		}
	}
}

mossyResources {
	//expandFiles = ["custom", "file", "patterns", "here"]
}

repositories {
	maven {
		name = "Cloth Config"
		url = "https://maven.shedaniel.me/"
	} // Cloth Config

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	} // Replay Mod

	maven {
		name = 'GeckoLib'
		url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
			includeGroup("com.eliotlash.molang")
		}
	}
}

dependencies {
	def mcVersion = stonecutter.current.version.toString()

	// Fabric permission api
	def fpaVersion = prop("dep.fabric-permissions-api")
	include(modImplementation('me.lucko:fabric-permissions-api:' + fpaVersion))

	// Cloth Config
	def clothConfigVersion = prop("dep.cloth-config")
	modApi("me.shedaniel.cloth:cloth-config-fabric:${stonecutter.compare("1.19", mcVersion) == 1 ? clothConfigVersion : MossyPlugin.substringBefore(clothConfigVersion, "+")}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// GeckoLib
	def geckoLibVersion = prop("dep.geckolib")
	if (geckoLibVersion != "unknown") {
		if (mcVersion == "1.17.1") {
			modImplementation("software.bernie.geckolib:geckolib-fabric-1.17:${geckoLibVersion}")
		} else if (mcVersion == "1.18.2") {
			modImplementation("software.bernie.geckolib:geckolib-fabric-1.18:${geckoLibVersion}")
		} else if (mcVersion == "1.19.1" || mcVersion == "1.19.2") {
			modImplementation("software.bernie.geckolib:geckolib-fabric-1.19:${geckoLibVersion}")
		} else if (mcVersion == "1.20") {
			modImplementation("software.bernie.geckolib:geckolib-fabric-1.20.1:${geckoLibVersion}")
		} else {
			modImplementation("software.bernie.geckolib:geckolib-fabric-${mcVersion}:${geckoLibVersion}")
		}
	}
}

stonecutter {
	stonecutter.const("geckolib", prop("dep.geckolib") != "unknown")
	stonecutter.const("flashback", prop("dep.flashback") != "unknown")
	stonecutter.swap("server_config_version", prop("data.server_config_version"))
}

String prop(String key) {
	return findProperty(key).toString()
}